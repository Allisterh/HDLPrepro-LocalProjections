// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simulate_LP
List simulate_LP(const unsigned int& M, const unsigned int& T_, const unsigned int& LP_lags, const unsigned int& hmax, const arma::cube& VAR_coefficients, const arma::mat& Sigma_epsilon, const arma::vec irf_1to1, const bool& init_partial, const arma::vec z_quantiles, const arma::vec chi2_quantiles, const int& selection, const double& PIconstant, const bool& progress_bar, bool OLS, unsigned int threads);
RcppExport SEXP _HDLPrepro_simulate_LP(SEXP MSEXP, SEXP T_SEXP, SEXP LP_lagsSEXP, SEXP hmaxSEXP, SEXP VAR_coefficientsSEXP, SEXP Sigma_epsilonSEXP, SEXP irf_1to1SEXP, SEXP init_partialSEXP, SEXP z_quantilesSEXP, SEXP chi2_quantilesSEXP, SEXP selectionSEXP, SEXP PIconstantSEXP, SEXP progress_barSEXP, SEXP OLSSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type T_(T_SEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type LP_lags(LP_lagsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type hmax(hmaxSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type VAR_coefficients(VAR_coefficientsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_epsilon(Sigma_epsilonSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type irf_1to1(irf_1to1SEXP);
    Rcpp::traits::input_parameter< const bool& >::type init_partial(init_partialSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type z_quantiles(z_quantilesSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type chi2_quantiles(chi2_quantilesSEXP);
    Rcpp::traits::input_parameter< const int& >::type selection(selectionSEXP);
    Rcpp::traits::input_parameter< const double& >::type PIconstant(PIconstantSEXP);
    Rcpp::traits::input_parameter< const bool& >::type progress_bar(progress_barSEXP);
    Rcpp::traits::input_parameter< bool >::type OLS(OLSSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_LP(M, T_, LP_lags, hmax, VAR_coefficients, Sigma_epsilon, irf_1to1, init_partial, z_quantiles, chi2_quantiles, selection, PIconstant, progress_bar, OLS, threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HDLPrepro_simulate_LP", (DL_FUNC) &_HDLPrepro_simulate_LP, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_HDLPrepro(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
